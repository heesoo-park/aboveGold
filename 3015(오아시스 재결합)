import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int N = Integer.parseInt(br.readLine());
        int[] heights = new int[N];
        long result = 0;

        Stack<Pair> stack = new Stack<>();

        for (int i = 0; i < N; i++) {
            heights[i] = Integer.parseInt(br.readLine());
        }

        for (int i = 0; i < N; i++) {
            Pair pair = new Pair(i, 1);

            while (!stack.empty() && heights[stack.peek().num] <= heights[i]) {
                Pair top = stack.pop();
                result += top.count;
                if (heights[top.num] == heights[i]) pair.count += top.count;
            }

            if (!stack.empty()) result++;

            stack.push(pair);
        }

        System.out.println(result);
    }

    static class Pair {
        int num;
        int count;

        public Pair(int num, int count) {
            this.num = num;
            this.count = count;
        }
    }
}

// 처음에는 이전에 풀었던 스택 문제처럼 접근했다
// 하지만 수를 찾거나 사이 개수를 찾는 방법으로는 해결할 수 없었다
// 큰 틀은 같지만 그 안에 있는 조건이 이전과 같은 접근을 허락하지 않았다
// 그래서 결과적으로 사용한건 Pair class와 스택의 삽입&삭제 중 계산하는 방법이다
// 그렇게 해서 같은 수에 대해서 처리할 수 있고 어느 한 쪽 수보다 큰 수가 사이에 있을 때도 처리할 수 있었다
// 물론 혼자힘으로 풀지는 못했고 아직 이해가 덜 되었지만 이후에 다시 도전해봐야겠다
