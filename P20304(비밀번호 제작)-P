// 첫번째 풀이
import java.io.*;
import java.util.*;

public class Main {
    static int N, M, depth;
    static boolean[] visited;
    static Queue<Integer> q = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        N = Integer.parseInt(br.readLine());
        M = Integer.parseInt(br.readLine());

        visited = new boolean[N + 1];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < M; i++) {
            int usedPassword = Integer.parseInt(st.nextToken());
            q.offer(usedPassword);
            visited[usedPassword] = true;
        }

        solve();
    }

    static void solve() {
        while (!q.isEmpty()) {
            int size = q.size();
            depth++;

            while (size-- > 0) {
                int cur = q.poll();
                int x = 1;
                while (x <= N) {
                    if ((x ^ cur) <= N && !visited[x ^ cur]) {
                        visited[x ^ cur] = true;
                        q.offer(x ^ cur);
                    }
                    x = x << 1;
                }
            }
        }
        System.out.println(depth - 1);
    }
}

// 두번째 풀이
import java.io.*;
import java.util.*;

public class Main {
    static int N, M;
    static int[] visited;
    static Queue<Integer> q = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        N = Integer.parseInt(br.readLine());
        M = Integer.parseInt(br.readLine());

        visited = new int[N + 1];
        Arrays.fill(visited, Integer.MIN_VALUE);
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < M; i++) {
            int usedPassword = Integer.parseInt(st.nextToken());
            q.offer(usedPassword);
            visited[usedPassword] = 0;
        }

        solve();
    }

    static void solve() {
        int max = 0;

        while (!q.isEmpty()) {
            int cur = q.poll();

            for (int i = 0; i < 20; i++) {
                int next = cur ^ (1 << i);

                if (next > N || visited[next] != Integer.MIN_VALUE) continue;

                q.offer(next);
                visited[next] = visited[cur] + 1;
                max = Math.max(max, visited[next]);
            }
        }
        System.out.println(max);
    }
}


// 이건 이후에 다시 이해의 시간을 가지도록... 해야겠다
// 값을 배열에 저장하는 거랑 값을 계속 키워가는 거가 있더라
