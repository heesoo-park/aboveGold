import java.io.*;
import java.util.*;

public class Main {
    static int R, C, time;
    static ArrayList<Point> swans = new ArrayList<>();
    static char[][] map = new char[1501][1501];
    static boolean[][] visited = new boolean[1501][1501];
    static Queue<Point> q = new LinkedList<>();
    static Queue<Point> waterQ = new LinkedList<>();
    static int[] dy = {0, 1, 0, -1};
    static int[] dx = {1, 0, -1, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());

        for (int i = 0; i < R; i++) {
            String str = br.readLine();
            for (int j = 0; j < C; j++) {
                map[i][j] = str.charAt(j);
                if (map[i][j] == 'L') {
                    swans.add(new Point(i, j));
                }
                if (map[i][j] != 'X') {
                    waterQ.add(new Point(i, j));
                }
            }
        }

        solve();
    }

    static void solve() {
        q.add(swans.get(0));
        Point target = swans.get(1);
        visited[swans.get(0).r][swans.get(0).c] = true;

        boolean isMeet = false;
        while (true) {
            Queue<Point> nextQ = new LinkedList<>();

            while (!q.isEmpty()) {
                Point cur = q.poll();

                if (cur.r == target.r && cur.c == target.c) {
                    isMeet = true;
                    break;
                }

                for (int i = 0; i < 4; i++) {
                    int new_r = cur.r + dy[i];
                    int new_c = cur.c + dx[i];

                    if (new_r < 0 || new_r >= R || new_c < 0 || new_c >= C) continue;
                    if (visited[new_r][new_c]) continue;

                    visited[new_r][new_c] = true;

                    if (map[new_r][new_c] == 'X') {
                        nextQ.add(new Point(new_r, new_c));
                        continue;
                    }

                    q.add(new Point(new_r, new_c));
                }
            }

            if (isMeet) break;
            q = nextQ;

            int size = waterQ.size();

            for (int i = 0; i < size; i++) {
                Point ice = waterQ.poll();

                for (int j = 0; j < 4; j++) {
                    int ice_new_r = ice.r + dy[j];
                    int ice_new_c = ice.c + dx[j];

                    if (ice_new_r < 0 || ice_new_r >= R || ice_new_c < 0 || ice_new_c >= C) continue;

                    if (map[ice_new_r][ice_new_c] == 'X') {
                        map[ice_new_r][ice_new_c] = '.';
                        waterQ.add(new Point(ice_new_r, ice_new_c));
                    }
                }
            }
            time++;
        }

        System.out.println(time);
    }

    static class Point {
        int r,c;

        public Point(int r, int c) {
            this.r = r;
            this.c = c;
        }
    }
}


// 시간초과난 코드
import java.io.*;
import java.util.*;

public class Main {
    static int R, C, time;
    static ArrayList<Point> swans = new ArrayList<>();
    static char[][] map = new char[1501][1501];
    static boolean[][] visited = new boolean[1501][1501];
    static int[] dy = {0, 1, 0, -1};
    static int[] dx = {1, 0, -1, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());

        for (int i = 0; i < R; i++) {
            String str = br.readLine();
            for (int j = 0; j < C; j++) {
                map[i][j] = str.charAt(j);
                if (map[i][j] == 'L') {
                    swans.add(new Point(i, j));
                }
            }
        }

        solve();
    }

    static void solve() {
        while (!isMeet()) {
            meltIce();
            time++;
        }

        System.out.println(time);
    }

    static void meltIce() {
        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if (map[i][j] == 'X') {
                    for (int k = 0; k < 4; k++) {
                        if (i + dy[k] < 0 || i + dy[k] >= R || j + dx[k] < 0 || j + dx[k] >= C) continue;

                        if (map[i + dy[k]][j + dx[k]] == '.' || map[i + dy[k]][j + dx[k]] == 'L') {
                            map[i][j] = '-';
                            break;
                        }
                    }
                }
            }
        }

        for (int i = 0; i < R; i++) {
            for (int j = 0; j < C; j++) {
                if (map[i][j] == '-') {
                    map[i][j] = '.';
                }
                visited[i][j] = false;
            }
        }
    }

    static boolean isMeet() {
        Queue<Point> q = new LinkedList<>();
        q.add(swans.get(0));
        Point target = swans.get(1);
        visited[swans.get(0).r][swans.get(0).c] = true;

        while (!q.isEmpty()) {
            Point cur = q.poll();

            if (cur.r == target.r && cur.c == target.c) {
                return true;
            }

            for (int i = 0; i < 4; i++) {
                int new_r = cur.r + dy[i];
                int new_c = cur.c + dx[i];

                if (new_r < 0 || new_r >= R || new_c < 0 || new_c >= C) continue;
                if (visited[new_r][new_c]) continue;

                if (map[new_r][new_c] == '.' || map[new_r][new_c] == 'L') {
                    visited[new_r][new_c] = true;
                    q.add(new Point(new_r, new_c));
                }
            }
        }

        return false;
    }

    static class Point {
        int r,c;

        public Point(int r, int c) {
            this.r = r;
            this.c = c;
        }
    }
}

// 어째서 그대로 문제그대로 진행하면 시간초과나구요!!!
// ...플레 문제 풀어냈다고 좋아할 뻔이 아니라 좋아했는데!!!
// BFS 2번쓰지도 않았는데 for문을 중첩한게 문제였으려나
// 블로그를 봤더니 끊어진데서 다시 시작하는 방법을 사용하더라
// 이건 또 색다른 BFS방법이었다
// 현재 상태의 종단점이 다음 상태의 시작점이 되는 마법
// 큐를 3개나 쓰면서 하다보니 정말 이걸 어떻게 혼자 풀 수 있을까 싶긴 하더라
// 안 되지는 않겠지만.. 그렇지만.. 이건 좀 너무한거 아니요!!
// 처음에 세팅할 게 좀 있는 문제였다
// 뭔가 BFS 2번같은 느낌인데 착각인가 싶다
// 아마 R,C의 크기만 조금 작았으면 시간초과난 코드도 통과하지 않았을까 싶다
