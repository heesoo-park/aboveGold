import java.io.*;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        int N = Integer.parseInt(br.readLine());

        int[] towers = new int[N];
        Stack<Integer> stack = new Stack<>();

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            towers[i] = Integer.parseInt(st.nextToken());
        }

        for (int i = N - 1; i >= 0; i--) {
            while(!stack.empty() && towers[stack.peek()] < towers[i]) {
                towers[stack.pop()] = i + 1;
            }

            stack.push(i);
        }

        while(!stack.empty()) {
            towers[stack.pop()] = 0;
        }

        for (int n : towers) {
            bw.write(n + " ");
        }
        br.close();
        bw.flush();
        br.close();
    }
}

// 이전에 오큰수 문제를 풀어서 그런지 매우 접근도 쉽고 금방 푼 문제
// 이 문제는 왼큰수 문제로 이해되었고 그래서 접근만 반대로 했더니 해결됐다
