import java.io.*;
import java.util.*;

public class Main {
    static int N, K;
    static int[] road = new int[100001];
    static boolean[] visited = new boolean[100001];
    static int[] parent = new int[100001];

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        Arrays.fill(parent, -1);

        solve();

        List<Integer> result = new ArrayList<>();
        int idx = K;
        result.add(K);
        while(parent[idx] != -1) {
            result.add(parent[idx]);
            idx = parent[idx];
        }
        Collections.reverse(result);
        for (int n : result) {
            bw.write(n + " ");
        }
        bw.flush();
        bw.close();
    }

    static void solve() {
        Queue<Integer> q = new LinkedList<>();
        q.add(N);
        visited[N] = true;

        while (!q.isEmpty()) {
            int cur = q.poll();

            if (cur == K) {
                System.out.println(road[cur]);
                return;
            }

            if (cur - 1 >= 0) {
                if (!visited[cur - 1]) {
                    road[cur - 1] = road[cur] + 1;
                    visited[cur - 1] = true;
                    parent[cur - 1] = cur;
                    q.add(cur - 1);
                } else {
                    if (road[cur - 1] > road[cur] + 1) {
                        road[cur - 1] = road[cur] + 1;
                        parent[cur - 1] = cur;
                    }
                }
            }

            if (cur + 1 < 100001) {
                if (!visited[cur + 1]) {
                    road[cur + 1] = road[cur] + 1;
                    visited[cur + 1] = true;
                    parent[cur + 1] = cur;
                    q.add(cur + 1);
                } else {
                    if (road[cur + 1] > road[cur] + 1) {
                        road[cur + 1] = road[cur] + 1;
                        parent[cur + 1] = cur;
                    }
                }
            }

            if (cur * 2 < 100001) {
                if (!visited[cur * 2]) {
                    road[cur * 2] = road[cur] + 1;
                    visited[cur * 2] = true;
                    parent[cur * 2] = cur;
                    q.add(cur * 2);
                } else {
                    if (road[cur * 2] > road[cur] + 1) {
                        road[cur * 2] = road[cur] + 1;
                        parent[cur * 2] = cur;
                    }
                }
            }
        }
    }
}

// 숨바꼭질 네 녀석..!!
// 내가 졌다...
// 그냥 최단 시간 찾는 건 쉽게 했는데
// 경로에 있는 숫자 찾는 건 실패했다
// 그래서 블로그를 참고하려고 스크롤을 내리다가 배열 하나 선언해서 거기에 이전값을 넣으라는 걸 봤다
// 이거다 싶어서 바로 해서 성공
// 약간 코드가 별로인 거 같지만 성공했다
// visited 배열 갔던 곳 또 갈 때는 크기 비교해서 업데이트해줬다
// 그리고 경로 확인용 배열은 0이 아니라 -1로 초기화해줬다
// 0으로 했더니 걸리는 테스트 케이스가 있더라
// 이제는 다시 보지 말자 숨바꼭질아~~
