import java.io.*;
import java.util.*;

public class Main {
    static int time = 0;
    static int[][] visited = new int[2][500001];

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        int K = Integer.parseInt(st.nextToken());

        Arrays.fill(visited[0], -1);
        Arrays.fill(visited[1], -1);

        if (N == K) System.out.println(0);
        else solve(N, K);
    }

    static void solve(int n, int k) {
        Queue<Integer> q = new LinkedList<>();
        q.add(n);
        visited[0][n] = 0;

        int length = 0;
        int mode = 0;
        while (!q.isEmpty()) {
            length = q.size();
            time++;
            mode = time % 2;

            for (int i = 0; i < length; i++) {
                int cur = q.poll();

                if (cur - 1 >= 0 && visited[mode][cur - 1] == -1) {
                    q.add(cur - 1);
                    visited[mode][cur - 1] = time;
                }
                if (cur + 1 <= 500000 && visited[mode][cur + 1] == -1) {
                    q.add(cur + 1);
                    visited[mode][cur + 1] = time;
                }
                if (cur * 2 <= 500000 && visited[mode][cur * 2] == -1) {
                    q.add(cur * 2);
                    visited[mode][cur * 2] = time;
                }
            }

            k += time;
            if (k > 500000) {
                System.out.println(-1);
                break;
            }
            if (visited[mode][k] != -1) {
                System.out.println(time);
                break;
            }
        }
    }
}

// 어느새 숨바꼭질 시리즈의 마지막이었다
// 근데 왜 플레문제...?
// 이제는 동생도 가만히 있지를 못하더라
// 그래서 처음에는 동생을 먼저 움직이고 수빈이 체크하고 생각했는데... 아니더라
// 차원을 하나 높여서 홀수 짝수를 나누고 수빈이가 다시 제자리에 돌아올 수 있다는 점을 이용해 문제를 해결해나가야했다
// 이전 시리즈와 거~~의 비슷한 문제였지만 또 하나의 조건만 추가됐을 뿐인데 손을 못 대겠더라
// 참고한 블로그에서는 While문 안에 for문을 넣어서 큐를 싹 비우고 채우더라
// 아주 좋은 것 같았다
// 이 문제에서는 visited배열이 int형이라는 것, 2차원으로 설정해야한다는 것, 수빈이가 다시 제자리로 2초마다 돌아올 수 있다는 것이 가장 중요한 포인트였던 거 같다
// 역시 플레문제는 간단해보여도 손을 잘 못 대겠다
// 많이 훔쳐보고 데이면서 내성을 가져야겠다..!!
