import java.io.*;
import java.util.*;

public class Main {
    static int K, W, H;
    static int[][] map = new int[201][201];
    static boolean[][][] visited = new boolean[201][201][31];
    static int[][] horseMove = {{1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}};
    static int[][] monkeyMove = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        K = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine());
        W = Integer.parseInt(st.nextToken());
        H = Integer.parseInt(st.nextToken());

        for (int i = 0; i < H; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < W; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        System.out.println(solve());
    }

    static int solve() {
        Queue<Point> q = new LinkedList<>();
        q.add(new Point(0, 0, 0, K));
        visited[0][0][0] = true;

        while (!q.isEmpty()) {
            Point cur = q.poll();

            if (cur.r == H - 1 && cur.c == W - 1) {
                return cur.cnt;
            }

            if (cur.k > 0) {
                for (int i = 0; i < 8; i++) {
                    int new_r = cur.r + horseMove[i][0];
                    int new_c = cur.c + horseMove[i][1];

                    if (new_r < 0 || new_r >= H || new_c < 0 || new_c >= W) continue;
                    if (visited[new_r][new_c][cur.k - 1]) continue;

                    if (map[new_r][new_c] == 0) {
                        visited[new_r][new_c][cur.k - 1] = true;
                        q.add(new Point(new_r, new_c, cur.cnt + 1, cur.k - 1));
                    }
                }
            }
            for (int i = 0; i < 4; i++) {
                int new_r = cur.r + monkeyMove[i][0];
                int new_c = cur.c + monkeyMove[i][1];

                if (new_r < 0 || new_r >= H || new_c < 0 || new_c >= W) continue;
                if (visited[new_r][new_c][cur.k]) continue;

                if (map[new_r][new_c] == 0) {
                    visited[new_r][new_c][cur.k] = true;
                    q.add(new Point(new_r, new_c, cur.cnt + 1, cur.k));
                }
            }
        }
        return -1;
    }

    static class Point {
        int r, c, cnt, k;

        public Point(int r, int c, int cnt, int k) {
            this.r = r;
            this.c = c;
            this.cnt = cnt;
            this.k = k;
        }
    }
}

// 아... 거의다 했는데
// visited 배열 처리를 못해서 마무리를 혼자 힘으로 못지었네
// 블로그를 보고나서야 '아... 벽부수기 유형이었구나' 했다
// 다른 분기가 생기고 횟수가 있고 그로 인해 visited배열의 막히는 부분이 있을 때 차원을 늘려서 멀티버스를 만드는 거였는데...
// 그래도 이외의 구조는 다 완성을 했다
// 처음에 몇 개의 테스트케이스가 통과하길래 풀었나?! 했다가 바로 다음 테스트케이스에서 막혀버렸다
// 그게 뒤돌아간 좌표를 다른 친구가 가려다가 못 가는 경우였다
// 또 나오면 그때는 풀 수 있지 않을까...?
